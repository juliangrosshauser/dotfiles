# create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$@"
}

# start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-8000}"
  open "http://localhost:${port}/"
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# copy with progress
function cpprogress() {
  rsync -WavP --human-readable --progress $1 $2
}

function brewupdate() {
  echo -e "Updating brew\n"
  brew update
  brew upgrade --all
}

function gemupdate() {
  echo -e "Updating gem\n"
  gem update --system
  gem update
  gem cleanup
}

function npmupdate() {
  echo -e "Updating npm\n"
  npm cache clean
  npm install -g npm@latest
}

function updatesystem() {
  brewupdate
  echo ""
  gemupdate
  echo ""
  npmupdate
}

function erasesimulators {
  killall "iOS Simulator"

  OUTPUT="$(xcrun simctl list)"
  TMPFILE=/tmp/simulator_erase_list.txt

  echo $OUTPUT | awk -F "[()]" '{ for (i=2; i<NF; i+=2) print $i }' | grep '^[-A-Z0-9]*$' > $TMPFILE

  for UUID in `awk '{ print $1 }' $TMPFILE`; do
    xcrun simctl shutdown $UUID
    xcrun simctl erase $UUID
  done

  rm $TMPFILE
}
